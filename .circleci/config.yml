version: 2.1

defaults: 
  - &default
      docker:
        - image: circleci/node:13.8
  - &default-python
      docker:
        - image: circleci/python



commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      su:
        type: string
        default: ''
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            << parameters.su >>aws cloudformation delete-stack \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            << parameters.su >>aws cloudformation delete-stack \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
  install-awscli:
    description: install aws-cli
    parameters:
      su:
        type: string
        default: ''
    steps:
      - run:
          command: |
            << parameters.su >>curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            << parameters.su >>unzip awscliv2.zip
            << parameters.su >>sudo ./aws/install

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = $(curl --insecure "${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}")
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    <<: *default
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
             cd frontend
             npm install
             npm run build
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    <<: *default
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    <<: *default
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: run frontend test
          command: |
            cd frontend
            npm run test
                
  test-backend:
    <<: *default
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: run backend test
          command: |
            cd backend
            npm run test

  scan-frontend:
    <<: *default
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan fronted
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    <<: *default
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
  
  run-migrations:
    <<: *default
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - install-awscli:
          su: "sudo "
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt

            if grep -q "has been executed successfully" ~/project/backend/migrations_dump.txt
            then
              curl "${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}" -d "1"
            else
              curl "${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}" -d "0"
            fi
      - destroy-environment

  deploy-frontend:
    <<: *default-python
    steps:
      - checkout
      - install-awscli:
          su: "sudo "
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            sudo apt install tar gzip -y
            sudo pip install ansible
            sudo curl -fsSL https://deb.nodesource.com/setup_current.x | sudo -E bash -
            sudo apt-get install nodejs
            sudo npm install pm2

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(curl --insecure $"{KVDB_BUCKET}/web-${CIRCLE_WORKFLOW_ID:0:7}")
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env

      - run:
          name: Deploy frontend service
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      
      - revert-migrations
      - destroy-environment

  deploy-backend:
    <<: *default-python
    steps:
      - checkout
      - install-awscli:
          su: "sudo " 
      - add_ssh_keys:
          fingerprints:
            - "88:ea:0c:dc:7f:9a:71:71:56:79:4c:d9:eb:1a:06:3d"
      - run:
          name: Install dependencies
          command: |
            sudo apt install tar gzip -y
            sudo pip install ansible

      - run:
          name: Create Artifacts
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            sudo tar -C backend -czvf artifact.tar.gz .
            sudo mkdir -p .circleci/ansible/roles/deploy/files
            sudo mv artifact.tar.gz .circleci/ansible/roles/deploy/files
            cd .circleci/ansible
            sudo curl --insecure "${KVDB_BUCKET}/web-${CIRCLE_WORKFLOW_ID:0:7}" >> inventory.txt
            echo "Contents of inventory.txt file is $(cat inventory.txt)"
      - run:
          name: Deploy backend
          command: |

            ansible-playbook -i inventory.txt deploy-backend.yml
      
      - destroy-environment:
          su: "sudo "



  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum install -y gzip tar
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
            sleep 40 #wait for infrastructure to provision
  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query Reservations[*].Instances[*].PublicIpAddress \
              --output text >> instances.txt
            curl "${KVDB_BUCKET}/web-${CIRCLE_WORKFLOW_ID:0:7}" -d "$(cat instances.txt)"
            if [[ -z "$(cat instances.txt)" ]]; then exit 1; fi

            cat instances.txt >> ~/project/.circleci/ansible/inventory.txt
            cat instances.txt
            rm instances.txt
          
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - destroy-environment

  configure-infrastructure:
    <<: *default-python
    steps:
      - checkout
      - install-awscli:
          su: "sudo " 
      - add_ssh_keys:
          fingerprints:
            - "88:ea:0c:dc:7f:9a:71:71:56:79:4c:d9:eb:1a:06:3d"
      - run:
          name: Install dependencies
          command: |
            sudo apt install tar gzip -y
            sudo pip install ansible
                       
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            sudo curl --insecure "https://kvdb.io/4MemjaUyF51zbLJncfsSF5/web-${CIRCLE_WORKFLOW_ID:0:7}" >> inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      
      - destroy-environment:
          su: "sudo "



workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
 
